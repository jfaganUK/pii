// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// getEdgeNetworkCalc
IntegerMatrix getEdgeNetworkCalc(IntegerMatrix inputEdgeList);
RcppExport SEXP pii_getEdgeNetworkCalc(SEXP inputEdgeListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type inputEdgeList(inputEdgeListSEXP);
    rcpp_result_gen = Rcpp::wrap(getEdgeNetworkCalc(inputEdgeList));
    return rcpp_result_gen;
END_RCPP
}
// piiCalc
NumericVector piiCalc(IntegerMatrix edgeDistance, NumericVector edgevalence, double piiBeta, double piiX, int maxDistance);
RcppExport SEXP pii_piiCalc(SEXP edgeDistanceSEXP, SEXP edgevalenceSEXP, SEXP piiBetaSEXP, SEXP piiXSEXP, SEXP maxDistanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type edgeDistance(edgeDistanceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type edgevalence(edgevalenceSEXP);
    Rcpp::traits::input_parameter< double >::type piiBeta(piiBetaSEXP);
    Rcpp::traits::input_parameter< double >::type piiX(piiXSEXP);
    Rcpp::traits::input_parameter< int >::type maxDistance(maxDistanceSEXP);
    rcpp_result_gen = Rcpp::wrap(piiCalc(edgeDistance, edgevalence, piiBeta, piiX, maxDistance));
    return rcpp_result_gen;
END_RCPP
}
// piiTriadicCalc
NumericVector piiTriadicCalc(IntegerMatrix edgeDistance, NumericVector edgevalence, double piiBeta, double piiX, int maxDistance, DataFrame triadTable, double piiDelta);
RcppExport SEXP pii_piiTriadicCalc(SEXP edgeDistanceSEXP, SEXP edgevalenceSEXP, SEXP piiBetaSEXP, SEXP piiXSEXP, SEXP maxDistanceSEXP, SEXP triadTableSEXP, SEXP piiDeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type edgeDistance(edgeDistanceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type edgevalence(edgevalenceSEXP);
    Rcpp::traits::input_parameter< double >::type piiBeta(piiBetaSEXP);
    Rcpp::traits::input_parameter< double >::type piiX(piiXSEXP);
    Rcpp::traits::input_parameter< int >::type maxDistance(maxDistanceSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type triadTable(triadTableSEXP);
    Rcpp::traits::input_parameter< double >::type piiDelta(piiDeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(piiTriadicCalc(edgeDistance, edgevalence, piiBeta, piiX, maxDistance, triadTable, piiDelta));
    return rcpp_result_gen;
END_RCPP
}
// triadTable
DataFrame triadTable(List edgeDistance, IntegerMatrix shortPaths, IntegerMatrix triads, CharacterVector vertices, NumericVector edgevalence);
RcppExport SEXP pii_triadTable(SEXP edgeDistanceSEXP, SEXP shortPathsSEXP, SEXP triadsSEXP, SEXP verticesSEXP, SEXP edgevalenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type edgeDistance(edgeDistanceSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type shortPaths(shortPathsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type triads(triadsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vertices(verticesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type edgevalence(edgevalenceSEXP);
    rcpp_result_gen = Rcpp::wrap(triadTable(edgeDistance, shortPaths, triads, vertices, edgevalence));
    return rcpp_result_gen;
END_RCPP
}
// valenceEdgeCounts
List valenceEdgeCounts(IntegerMatrix edgeDistance, NumericVector edgevalence, int maxDistance);
RcppExport SEXP pii_valenceEdgeCounts(SEXP edgeDistanceSEXP, SEXP edgevalenceSEXP, SEXP maxDistanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type edgeDistance(edgeDistanceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type edgevalence(edgevalenceSEXP);
    Rcpp::traits::input_parameter< int >::type maxDistance(maxDistanceSEXP);
    rcpp_result_gen = Rcpp::wrap(valenceEdgeCounts(edgeDistance, edgevalence, maxDistance));
    return rcpp_result_gen;
END_RCPP
}
